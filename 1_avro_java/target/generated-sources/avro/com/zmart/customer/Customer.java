/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.zmart.customer;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Avro Schema for our ZMart's Customer */
@org.apache.avro.specific.AvroGenerated
public class Customer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7063069885263147307L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Customer\",\"namespace\":\"com.zmart.customer\",\"doc\":\"Avro Schema for our ZMart's Customer\",\"fields\":[{\"name\":\"client_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"client Id of Customer\"},{\"name\":\"first_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"First Name of Customer\"},{\"name\":\"last_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Last Name of Customer\"},{\"name\":\"product_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"id of product\"},{\"name\":\"price\",\"type\":\"float\",\"doc\":\"price of product in euro\"},{\"name\":\"quantity\",\"type\":\"int\",\"doc\":\"quantity of products in units\"},{\"name\":\"credict_card\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"credict card number in format xxx-xxx-xxx-945\"},{\"name\":\"entity_finance\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"name entity finance of credict card\",\"default\":\"unknown\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Customer> ENCODER =
      new BinaryMessageEncoder<Customer>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Customer> DECODER =
      new BinaryMessageDecoder<Customer>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Customer> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Customer> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Customer>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Customer to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Customer from a ByteBuffer. */
  public static Customer fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** client Id of Customer */
   private java.lang.String client_id;
  /** First Name of Customer */
   private java.lang.String first_name;
  /** Last Name of Customer */
   private java.lang.String last_name;
  /** id of product */
   private java.lang.String product_id;
  /** price of product in euro */
   private float price;
  /** quantity of products in units */
   private int quantity;
  /** credict card number in format xxx-xxx-xxx-945 */
   private java.lang.String credict_card;
  /** name entity finance of credict card */
   private java.lang.String entity_finance;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Customer() {}

  /**
   * All-args constructor.
   * @param client_id client Id of Customer
   * @param first_name First Name of Customer
   * @param last_name Last Name of Customer
   * @param product_id id of product
   * @param price price of product in euro
   * @param quantity quantity of products in units
   * @param credict_card credict card number in format xxx-xxx-xxx-945
   * @param entity_finance name entity finance of credict card
   */
  public Customer(java.lang.String client_id, java.lang.String first_name, java.lang.String last_name, java.lang.String product_id, java.lang.Float price, java.lang.Integer quantity, java.lang.String credict_card, java.lang.String entity_finance) {
    this.client_id = client_id;
    this.first_name = first_name;
    this.last_name = last_name;
    this.product_id = product_id;
    this.price = price;
    this.quantity = quantity;
    this.credict_card = credict_card;
    this.entity_finance = entity_finance;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return client_id;
    case 1: return first_name;
    case 2: return last_name;
    case 3: return product_id;
    case 4: return price;
    case 5: return quantity;
    case 6: return credict_card;
    case 7: return entity_finance;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: client_id = (java.lang.String)value$; break;
    case 1: first_name = (java.lang.String)value$; break;
    case 2: last_name = (java.lang.String)value$; break;
    case 3: product_id = (java.lang.String)value$; break;
    case 4: price = (java.lang.Float)value$; break;
    case 5: quantity = (java.lang.Integer)value$; break;
    case 6: credict_card = (java.lang.String)value$; break;
    case 7: entity_finance = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'client_id' field.
   * @return client Id of Customer
   */
  public java.lang.String getClientId() {
    return client_id;
  }


  /**
   * Gets the value of the 'first_name' field.
   * @return First Name of Customer
   */
  public java.lang.String getFirstName() {
    return first_name;
  }


  /**
   * Gets the value of the 'last_name' field.
   * @return Last Name of Customer
   */
  public java.lang.String getLastName() {
    return last_name;
  }


  /**
   * Gets the value of the 'product_id' field.
   * @return id of product
   */
  public java.lang.String getProductId() {
    return product_id;
  }


  /**
   * Gets the value of the 'price' field.
   * @return price of product in euro
   */
  public java.lang.Float getPrice() {
    return price;
  }


  /**
   * Gets the value of the 'quantity' field.
   * @return quantity of products in units
   */
  public java.lang.Integer getQuantity() {
    return quantity;
  }


  /**
   * Gets the value of the 'credict_card' field.
   * @return credict card number in format xxx-xxx-xxx-945
   */
  public java.lang.String getCredictCard() {
    return credict_card;
  }


  /**
   * Gets the value of the 'entity_finance' field.
   * @return name entity finance of credict card
   */
  public java.lang.String getEntityFinance() {
    return entity_finance;
  }


  /**
   * Creates a new Customer RecordBuilder.
   * @return A new Customer RecordBuilder
   */
  public static com.zmart.customer.Customer.Builder newBuilder() {
    return new com.zmart.customer.Customer.Builder();
  }

  /**
   * Creates a new Customer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Customer RecordBuilder
   */
  public static com.zmart.customer.Customer.Builder newBuilder(com.zmart.customer.Customer.Builder other) {
    return new com.zmart.customer.Customer.Builder(other);
  }

  /**
   * Creates a new Customer RecordBuilder by copying an existing Customer instance.
   * @param other The existing instance to copy.
   * @return A new Customer RecordBuilder
   */
  public static com.zmart.customer.Customer.Builder newBuilder(com.zmart.customer.Customer other) {
    return new com.zmart.customer.Customer.Builder(other);
  }

  /**
   * RecordBuilder for Customer instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Customer>
    implements org.apache.avro.data.RecordBuilder<Customer> {

    /** client Id of Customer */
    private java.lang.String client_id;
    /** First Name of Customer */
    private java.lang.String first_name;
    /** Last Name of Customer */
    private java.lang.String last_name;
    /** id of product */
    private java.lang.String product_id;
    /** price of product in euro */
    private float price;
    /** quantity of products in units */
    private int quantity;
    /** credict card number in format xxx-xxx-xxx-945 */
    private java.lang.String credict_card;
    /** name entity finance of credict card */
    private java.lang.String entity_finance;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.zmart.customer.Customer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.client_id)) {
        this.client_id = data().deepCopy(fields()[0].schema(), other.client_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.first_name)) {
        this.first_name = data().deepCopy(fields()[1].schema(), other.first_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.last_name)) {
        this.last_name = data().deepCopy(fields()[2].schema(), other.last_name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.product_id)) {
        this.product_id = data().deepCopy(fields()[3].schema(), other.product_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.price)) {
        this.price = data().deepCopy(fields()[4].schema(), other.price);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.quantity)) {
        this.quantity = data().deepCopy(fields()[5].schema(), other.quantity);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.credict_card)) {
        this.credict_card = data().deepCopy(fields()[6].schema(), other.credict_card);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.entity_finance)) {
        this.entity_finance = data().deepCopy(fields()[7].schema(), other.entity_finance);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Customer instance
     * @param other The existing instance to copy.
     */
    private Builder(com.zmart.customer.Customer other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.client_id)) {
        this.client_id = data().deepCopy(fields()[0].schema(), other.client_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.first_name)) {
        this.first_name = data().deepCopy(fields()[1].schema(), other.first_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.last_name)) {
        this.last_name = data().deepCopy(fields()[2].schema(), other.last_name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.product_id)) {
        this.product_id = data().deepCopy(fields()[3].schema(), other.product_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.price)) {
        this.price = data().deepCopy(fields()[4].schema(), other.price);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.quantity)) {
        this.quantity = data().deepCopy(fields()[5].schema(), other.quantity);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.credict_card)) {
        this.credict_card = data().deepCopy(fields()[6].schema(), other.credict_card);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.entity_finance)) {
        this.entity_finance = data().deepCopy(fields()[7].schema(), other.entity_finance);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'client_id' field.
      * client Id of Customer
      * @return The value.
      */
    public java.lang.String getClientId() {
      return client_id;
    }

    /**
      * Sets the value of the 'client_id' field.
      * client Id of Customer
      * @param value The value of 'client_id'.
      * @return This builder.
      */
    public com.zmart.customer.Customer.Builder setClientId(java.lang.String value) {
      validate(fields()[0], value);
      this.client_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'client_id' field has been set.
      * client Id of Customer
      * @return True if the 'client_id' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'client_id' field.
      * client Id of Customer
      * @return This builder.
      */
    public com.zmart.customer.Customer.Builder clearClientId() {
      client_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'first_name' field.
      * First Name of Customer
      * @return The value.
      */
    public java.lang.String getFirstName() {
      return first_name;
    }

    /**
      * Sets the value of the 'first_name' field.
      * First Name of Customer
      * @param value The value of 'first_name'.
      * @return This builder.
      */
    public com.zmart.customer.Customer.Builder setFirstName(java.lang.String value) {
      validate(fields()[1], value);
      this.first_name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'first_name' field has been set.
      * First Name of Customer
      * @return True if the 'first_name' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'first_name' field.
      * First Name of Customer
      * @return This builder.
      */
    public com.zmart.customer.Customer.Builder clearFirstName() {
      first_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'last_name' field.
      * Last Name of Customer
      * @return The value.
      */
    public java.lang.String getLastName() {
      return last_name;
    }

    /**
      * Sets the value of the 'last_name' field.
      * Last Name of Customer
      * @param value The value of 'last_name'.
      * @return This builder.
      */
    public com.zmart.customer.Customer.Builder setLastName(java.lang.String value) {
      validate(fields()[2], value);
      this.last_name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'last_name' field has been set.
      * Last Name of Customer
      * @return True if the 'last_name' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'last_name' field.
      * Last Name of Customer
      * @return This builder.
      */
    public com.zmart.customer.Customer.Builder clearLastName() {
      last_name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'product_id' field.
      * id of product
      * @return The value.
      */
    public java.lang.String getProductId() {
      return product_id;
    }

    /**
      * Sets the value of the 'product_id' field.
      * id of product
      * @param value The value of 'product_id'.
      * @return This builder.
      */
    public com.zmart.customer.Customer.Builder setProductId(java.lang.String value) {
      validate(fields()[3], value);
      this.product_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'product_id' field has been set.
      * id of product
      * @return True if the 'product_id' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'product_id' field.
      * id of product
      * @return This builder.
      */
    public com.zmart.customer.Customer.Builder clearProductId() {
      product_id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * price of product in euro
      * @return The value.
      */
    public java.lang.Float getPrice() {
      return price;
    }

    /**
      * Sets the value of the 'price' field.
      * price of product in euro
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.zmart.customer.Customer.Builder setPrice(float value) {
      validate(fields()[4], value);
      this.price = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * price of product in euro
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'price' field.
      * price of product in euro
      * @return This builder.
      */
    public com.zmart.customer.Customer.Builder clearPrice() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * quantity of products in units
      * @return The value.
      */
    public java.lang.Integer getQuantity() {
      return quantity;
    }

    /**
      * Sets the value of the 'quantity' field.
      * quantity of products in units
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.zmart.customer.Customer.Builder setQuantity(int value) {
      validate(fields()[5], value);
      this.quantity = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * quantity of products in units
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'quantity' field.
      * quantity of products in units
      * @return This builder.
      */
    public com.zmart.customer.Customer.Builder clearQuantity() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'credict_card' field.
      * credict card number in format xxx-xxx-xxx-945
      * @return The value.
      */
    public java.lang.String getCredictCard() {
      return credict_card;
    }

    /**
      * Sets the value of the 'credict_card' field.
      * credict card number in format xxx-xxx-xxx-945
      * @param value The value of 'credict_card'.
      * @return This builder.
      */
    public com.zmart.customer.Customer.Builder setCredictCard(java.lang.String value) {
      validate(fields()[6], value);
      this.credict_card = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'credict_card' field has been set.
      * credict card number in format xxx-xxx-xxx-945
      * @return True if the 'credict_card' field has been set, false otherwise.
      */
    public boolean hasCredictCard() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'credict_card' field.
      * credict card number in format xxx-xxx-xxx-945
      * @return This builder.
      */
    public com.zmart.customer.Customer.Builder clearCredictCard() {
      credict_card = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'entity_finance' field.
      * name entity finance of credict card
      * @return The value.
      */
    public java.lang.String getEntityFinance() {
      return entity_finance;
    }

    /**
      * Sets the value of the 'entity_finance' field.
      * name entity finance of credict card
      * @param value The value of 'entity_finance'.
      * @return This builder.
      */
    public com.zmart.customer.Customer.Builder setEntityFinance(java.lang.String value) {
      validate(fields()[7], value);
      this.entity_finance = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'entity_finance' field has been set.
      * name entity finance of credict card
      * @return True if the 'entity_finance' field has been set, false otherwise.
      */
    public boolean hasEntityFinance() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'entity_finance' field.
      * name entity finance of credict card
      * @return This builder.
      */
    public com.zmart.customer.Customer.Builder clearEntityFinance() {
      entity_finance = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Customer build() {
      try {
        Customer record = new Customer();
        record.client_id = fieldSetFlags()[0] ? this.client_id : (java.lang.String) defaultValue(fields()[0]);
        record.first_name = fieldSetFlags()[1] ? this.first_name : (java.lang.String) defaultValue(fields()[1]);
        record.last_name = fieldSetFlags()[2] ? this.last_name : (java.lang.String) defaultValue(fields()[2]);
        record.product_id = fieldSetFlags()[3] ? this.product_id : (java.lang.String) defaultValue(fields()[3]);
        record.price = fieldSetFlags()[4] ? this.price : (java.lang.Float) defaultValue(fields()[4]);
        record.quantity = fieldSetFlags()[5] ? this.quantity : (java.lang.Integer) defaultValue(fields()[5]);
        record.credict_card = fieldSetFlags()[6] ? this.credict_card : (java.lang.String) defaultValue(fields()[6]);
        record.entity_finance = fieldSetFlags()[7] ? this.entity_finance : (java.lang.String) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Customer>
    WRITER$ = (org.apache.avro.io.DatumWriter<Customer>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Customer>
    READER$ = (org.apache.avro.io.DatumReader<Customer>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
